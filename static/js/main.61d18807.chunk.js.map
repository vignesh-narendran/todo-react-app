{"version":3,"sources":["Context/Appdata.js","Components/Todolist.js","Components/Todo.js","Components/Addtask.js","Pages/Home.js","Pages/About.js","Components/Header.js","Components/Banner.js","App.js","serviceWorker.js","index.js"],"names":["DateContext","React","createContext","ItemContext","Appdata","children","d","Date","useState","getDate","getMonth","getFullYear","date","items","changeItem","Provider","value","Todolist","props","useContext","className","key","item","index","onClick","e","checkThis","target","nextSibling","classList","contains","remove","add","deleteThis","previousSibling","innerText","filter","Todo","map","Addtask","id","type","placeholder","task","document","getElementById","prevArray","Home","About","style","textAlign","href","fontWeight","color","textDecoration","to","Header","Banner","splitDate","split","rowSpan","substr","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.61d18807.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport const DateContext = React.createContext();\r\nexport const ItemContext = React.createContext();\r\n\r\nconst Appdata = ({ children }) => {\r\n  const months = [\r\n    \"January\",\r\n    \"Febraury\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\"\r\n  ];\r\n\r\n  const d = new Date();\r\n  const [date] = useState(\r\n    d.getDate() + \" \" + months[d.getMonth()] + \", \" + d.getFullYear()\r\n  );\r\n\r\nconst [items, changeItem] = useState([]);\r\n  return (\r\n    <DateContext.Provider value={[date]}>\r\n        <ItemContext.Provider value={[items, changeItem]}>\r\n            {children}\r\n        </ItemContext.Provider>     \r\n    </DateContext.Provider>\r\n    );\r\n};\r\n\r\nexport default Appdata;\r\n","import React, { useContext } from \"react\";\r\nimport { ItemContext } from \"../Context/Appdata\";\r\nimport { FiCheck, FiTrash2 } from \"react-icons/fi\";\r\nexport default function Todolist(props) {\r\n  const [items, changeItem] = useContext(ItemContext);\r\n  const checkItem = e => {\r\n    var checkThis = e.target.nextSibling;\r\n    if(checkThis !== null){\r\n        if (checkThis.classList.contains(\"strike-through\")) {\r\n            checkThis.classList.remove(\"strike-through\");\r\n            e.target.classList.remove('green-tick');\r\n          } else {\r\n            checkThis.classList.add(\"strike-through\");\r\n            e.target.classList.add('green-tick');\r\n          }  \r\n    }\r\n  };\r\n  const deleteItem = e => {\r\n    var deleteThis = e.target.previousSibling.innerText;\r\n    changeItem(items.filter(e => e !== deleteThis));\r\n  };\r\n  return (\r\n    <div className=\"app-todolist\" key={props.item.index}>\r\n        <FiCheck className=\"todo-btn check-btn\" onClick={checkItem}/>\r\n        <p className=\"task\">{props.item}</p>\r\n      <FiTrash2 className=\"todo-btn delete-btn\" onClick={deleteItem} />\r\n    </div>\r\n  );\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {ItemContext} from '../Context/Appdata';\r\nimport Todolist from '../Components/Todolist';\r\n\r\nexport default function Todo() {\r\n    const [items] = useContext(ItemContext);\r\n    return (\r\n        <div className=\"app-todo\">\r\n            {items.map((item)=>(\r\n                <Todolist  item={item}/>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {ItemContext} from '../Context/Appdata';\r\nexport default function Addtask() {\r\n    const [, changeItem] = useContext(ItemContext);\r\n    const addTask = () =>{\r\n        var task = document.getElementById('new-task').value;\r\n        if(task === ''){\r\n        }else{\r\n            changeItem(prevArray => [...prevArray, task]);\r\n            document.getElementById('new-task').value = \"\";\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <div className=\"app-addtask\">\r\n            <div className=\"task-ip\">\r\n                <input id=\"new-task\" type=\"text\" placeholder=\"Add your task\"></input>\r\n            </div>\r\n            <div >\r\n                <input className=\"add-btn\" type=\"button\" onClick={addTask} value=\"+\"></input>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport Todo from '../Components/Todo';\r\nimport Addtask from \"../Components/Addtask\";\r\nexport default function Home() {\r\n  return (\r\n    <div>\r\n      <Addtask/>\r\n      <Todo/>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport { FiArrowLeft } from \"react-icons/fi\";\r\nexport default function About() {\r\n    return (\r\n        <div className=\"app-about\">\r\n            <h1>About To-Do List</h1>\r\n            <p style={{textAlign:'justify'}}>To-Do list is a web app created in React JS. It's a simple list app that accepts input from the user and adds it to the screen. When the user clicks on the check button, the task is stricken out to denote completion. When the user clicks on delete button, the task is deleted from the list.</p>\r\n            <h3>Technologies used: </h3>\r\n            <p>HTML, CSS, JavaScript, React JS and lots of persistence.</p>\r\n            <h3>Add-ons in v2.0 (under development)</h3>\r\n            <ul>\r\n                <li>Store tasks in memory so they can be accessed later.</li>\r\n                <li>Ability to customize list name.</li>\r\n                <li>Ability to edit a task.</li>\r\n                <li>Dark mode.</li>\r\n            </ul>\r\n            <h1>About the creator</h1>\r\n            <p style={{textAlign:'justify'}}>Hi, I am Vignesh Narendran. I am the creator of To-Do list. I've been into web development for more that two years now and I am loving it.</p>\r\n            <p style={{textAlign:'justify'}}>The source code for this web application is avaible in my <a href=\"https://github.com/vignesh-narendran\" style={{fontWeight:'bold',color:'var(--SEC-COLOR)', textDecoration:'none'}}>GitHub</a> along with lots of other cool projects.</p>\r\n            <Link className=\"home-button-desktop\" to=\"/todo-react-app\">Back to Home</Link>\r\n            <Link to=\"/todo-react-app\"><FiArrowLeft className=\"home-button-mobile\" /></Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\nexport default function Header() {\r\n    return (\r\n        <div>\r\n            <header className=\"app-header\">\r\n                <h2><Link to=\"/todo-react-app\">To-Do list</Link></h2>\r\n                <p>v1.0</p>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { DateContext } from \"../Context/Appdata\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FiInfo } from \"react-icons/fi\";\r\nexport default function Banner() {\r\n  const [date] = useContext(DateContext);\r\n  const splitDate = date.split(\" \");\r\n  return (\r\n    <div className=\"app-banner\">\r\n      <div className=\"date\">\r\n      <h3 className=\"date-desktop\">{date}</h3>\r\n      <div className=\"date-mobile\">\r\n        <table>\r\n          <tbody>\r\n          <tr>\r\n            <td className=\"date-mobile-date-table\" rowSpan=\"2\">\r\n              <p className=\"date-mobile-date\">{splitDate[0]}</p>\r\n            </td>\r\n            <td className=\"date-mobile-month-table\">\r\n              <p className=\"date-mobile-month\">{splitDate[1].substr(0, 3)}</p>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"date-mobile-year-table\">\r\n              <p className=\"date-mobile-year\">{splitDate[2]}</p>\r\n            </td>\r\n          </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      </div>\r\n      <div className=\"button\">\r\n      <Link className=\"about-desktop\" to=\"/todo-react-app/about\">About</Link>\r\n      <Link to=\"/todo-react-app/about\"><FiInfo className=\"about-mobile\"/></Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./Pages/Home\";\nimport About from \"./Pages/About\";\nimport Header from \"./Components/Header\";\nimport Banner from \"./Components/Banner\";\nimport Appdata from './Context/Appdata';\nfunction App() {\n  return (\n    <Appdata>\n    <Router>\n        <Header />\n          <Banner />\n        <Switch>\n          <Route exact path=\"/todo-react-app\" component={Home} />\n          <Route exact path=\"/todo-react-app/about\" component={About} />\n        </Switch>\n    </Router>\n    </Appdata>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}